# Package Lambda Layers for Gorggle (PowerShell)
# Creates Lambda layers for FFmpeg and requests library on Windows
# Requires: AWS CLI, Python (pip), tar (Windows 10+), zip (Compress-Archive)

param(
    [string]$Region = "us-east-1"
)

$ErrorActionPreference = "Stop"

Write-Host "=== Lambda Layer Packaging Script (PowerShell) ==="

$ProjectRoot = Split-Path -Parent $PSCommandPath
$LayersDir = Join-Path (Split-Path -Parent $ProjectRoot) "lambda_layers"
New-Item -ItemType Directory -Force -Path $LayersDir | Out-Null
New-Item -ItemType Directory -Force -Path (Join-Path $LayersDir "build") | Out-Null

# 1) FFmpeg Layer
Write-Host "`n>>> Creating FFmpeg Layer..."
$BuildDir = Join-Path $LayersDir "build"
Set-Location $BuildDir

$ffUrl = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
$ffTar = "ffmpeg-release-amd64-static.tar.xz"
if (!(Test-Path $ffTar)) {
    Write-Host "Downloading FFmpeg static build..."
    Invoke-WebRequest -Uri $ffUrl -OutFile $ffTar
}

Write-Host "Extracting FFmpeg..."
& tar -xf $ffTar
$ffDir = Get-ChildItem -Directory -Filter "ffmpeg-*-amd64-static" | Select-Object -First 1

$ffmpegLayerDir = Join-Path $LayersDir "ffmpeg"
$ffBinDir = Join-Path $ffmpegLayerDir "bin"
New-Item -ItemType Directory -Force -Path $ffBinDir | Out-Null
Copy-Item (Join-Path $ffDir.FullName "ffmpeg") $ffBinDir
Copy-Item (Join-Path $ffDir.FullName "ffprobe") $ffBinDir

$ffZip = Join-Path $LayersDir "ffmpeg-layer.zip"
if (Test-Path $ffZip) { Remove-Item $ffZip }
Compress-Archive -Path (Join-Path $ffmpegLayerDir '*') -DestinationPath $ffZip

Write-Host "FFmpeg layer created: $ffZip"

# 2) Requests Layer
Write-Host "`n>>> Creating Requests Library Layer..."
$requestsLayerDir = Join-Path $LayersDir "requests"
$requestsPythonDir = Join-Path $requestsLayerDir "python"
New-Item -ItemType Directory -Force -Path $requestsPythonDir | Out-Null

# Install requests into layer directory
python -m pip install requests --upgrade -t $requestsPythonDir | Out-Null

$reqZip = Join-Path $LayersDir "requests-layer.zip"
if (Test-Path $reqZip) { Remove-Item $reqZip }
Compress-Archive -Path (Join-Path $requestsLayerDir '*') -DestinationPath $reqZip

Write-Host "Requests layer created: $reqZip"

# 3) Upload Layers to AWS
Write-Host "`n>>> Uploading layers to AWS..."
aws configure list > $null 2>&1
if ($LASTEXITCODE -ne 0) { throw "AWS CLI not configured. Run 'aws configure'." }

$env:AWS_DEFAULT_REGION = $Region

$ffArn = ""
try {
    $ffArn = (aws lambda publish-layer-version `
            --layer-name gorggle-ffmpeg `
            --description "FFmpeg static binary for video processing" `
            --zip-file fileb://$ffZip `
            --compatible-runtimes python3.9 python3.10 python3.11 `
            --query 'LayerVersionArn' --output text).Trim()
    Write-Host "FFmpeg Layer ARN:    $ffArn"
}
catch {
    Write-Warning "Failed to publish FFmpeg layer (likely too large for Lambda). Proceeding without FFmpeg layer."
    $ffArn = ""
}

$reqArn = (aws lambda publish-layer-version `
        --layer-name gorggle-requests `
        --description "Python requests library for HTTP calls" `
        --zip-file fileb://$reqZip `
        --compatible-runtimes python3.9 python3.10 python3.11 `
        --query 'LayerVersionArn' --output text).Trim()

Write-Host "Requests Layer ARN:  $reqArn"

# 4) Save ARNs for Terraform
$tfvarsPath = Join-Path (Join-Path (Split-Path -Parent $ProjectRoot) 'infra\terraform') 'layer_arns.auto.tfvars'
@"
# Auto-generated by package_lambda_layers.ps1
# If publishing FFmpeg failed due to size, this may be empty. Lambda will fallback to EC2-side extraction.
ffmpeg_layer_arn  = "$ffArn"
requests_layer_arn = "$reqArn"
"@ | Set-Content -Path $tfvarsPath -Encoding ASCII

Write-Host "Saved ARNs to: $tfvarsPath"

Write-Host "`n=== Done ==="
Write-Host "Next: cd infra/terraform; terraform apply"
