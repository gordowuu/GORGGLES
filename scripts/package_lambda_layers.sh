#!/bin/bash
# Package Lambda Layers for Gorggle
# This script creates Lambda layers for FFmpeg and requests library
# Run this from your local machine (Linux/Mac) or EC2 instance

set -e  # Exit on error

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LAYERS_DIR="$PROJECT_ROOT/lambda_layers"

echo "=== Lambda Layer Packaging Script ==="
echo "Creating layers in: $LAYERS_DIR"

# Create directories
mkdir -p "$LAYERS_DIR/ffmpeg"
mkdir -p "$LAYERS_DIR/requests"
mkdir -p "$LAYERS_DIR/build"

# ============================================================================
# 1. FFmpeg Layer (~100MB)
# ============================================================================
echo ""
echo ">>> Creating FFmpeg Layer..."
cd "$LAYERS_DIR/build"

# Download pre-built FFmpeg binary for Lambda (Amazon Linux 2)
if [ ! -f "ffmpeg-release-amd64-static.tar.xz" ]; then
    echo "Downloading FFmpeg static build..."
    wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
fi

# Extract and organize for Lambda layer structure
echo "Extracting FFmpeg..."
tar -xf ffmpeg-release-amd64-static.tar.xz

# Find the extracted directory (name includes version)
FFMPEG_DIR=$(find . -maxdepth 1 -type d -name "ffmpeg-*-amd64-static" | head -n 1)

# Lambda layer structure: /opt/bin/ffmpeg
mkdir -p "$LAYERS_DIR/ffmpeg/bin"
cp "$FFMPEG_DIR/ffmpeg" "$LAYERS_DIR/ffmpeg/bin/"
cp "$FFMPEG_DIR/ffprobe" "$LAYERS_DIR/ffmpeg/bin/"
chmod +x "$LAYERS_DIR/ffmpeg/bin/ffmpeg"
chmod +x "$LAYERS_DIR/ffmpeg/bin/ffprobe"

# Create layer zip
cd "$LAYERS_DIR/ffmpeg"
zip -r ../ffmpeg-layer.zip .
cd "$LAYERS_DIR"

FFMPEG_SIZE=$(du -h ffmpeg-layer.zip | cut -f1)
echo "✓ FFmpeg layer created: ffmpeg-layer.zip ($FFMPEG_SIZE)"

# ============================================================================
# 2. Requests Library Layer (~5MB)
# ============================================================================
echo ""
echo ">>> Creating Requests Library Layer..."
cd "$LAYERS_DIR/build"

# Lambda layer structure: /opt/python/lib/python3.11/site-packages/
mkdir -p "$LAYERS_DIR/requests/python"

# Install requests into layer directory
pip install requests -t "$LAYERS_DIR/requests/python" --upgrade

# Create layer zip
cd "$LAYERS_DIR/requests"
zip -r ../requests-layer.zip .
cd "$LAYERS_DIR"

REQUESTS_SIZE=$(du -h requests-layer.zip | cut -f1)
echo "✓ Requests layer created: requests-layer.zip ($REQUESTS_SIZE)"

# ============================================================================
# 3. Upload Layers to AWS
# ============================================================================
echo ""
echo ">>> Uploading layers to AWS..."

# Check if AWS CLI is configured
if ! aws sts get-caller-identity &> /dev/null; then
    echo "ERROR: AWS CLI not configured. Run 'aws configure' first."
    exit 1
fi

# Upload FFmpeg layer
echo "Uploading FFmpeg layer..."
FFMPEG_LAYER_ARN=$(aws lambda publish-layer-version \
    --layer-name gorggle-ffmpeg \
    --description "FFmpeg static binary for video processing" \
    --zip-file fileb://ffmpeg-layer.zip \
    --compatible-runtimes python3.9 python3.10 python3.11 \
    --query 'LayerVersionArn' \
    --output text)

echo "✓ FFmpeg Layer ARN: $FFMPEG_LAYER_ARN"

# Upload Requests layer
echo "Uploading Requests library layer..."
REQUESTS_LAYER_ARN=$(aws lambda publish-layer-version \
    --layer-name gorggle-requests \
    --description "Python requests library for HTTP calls" \
    --zip-file fileb://requests-layer.zip \
    --compatible-runtimes python3.9 python3.10 python3.11 \
    --query 'LayerVersionArn' \
    --output text)

echo "✓ Requests Layer ARN: $REQUESTS_LAYER_ARN"

# ============================================================================
# 4. Save Layer ARNs for Terraform
# ============================================================================
echo ""
echo ">>> Saving Layer ARNs..."

cat > "$PROJECT_ROOT/infra/terraform/layer_arns.auto.tfvars" <<EOF
# Auto-generated by package_lambda_layers.sh
# These ARNs are used in main.tf for Lambda function configurations

ffmpeg_layer_arn  = "$FFMPEG_LAYER_ARN"
requests_layer_arn = "$REQUESTS_LAYER_ARN"
EOF

echo "✓ Layer ARNs saved to: infra/terraform/layer_arns.auto.tfvars"

# ============================================================================
# 5. Cleanup
# ============================================================================
echo ""
read -p "Clean up build files? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "$LAYERS_DIR/build"
    rm -rf "$LAYERS_DIR/ffmpeg/bin"
    rm -rf "$LAYERS_DIR/requests/python"
    echo "✓ Build files cleaned"
fi

# ============================================================================
# Summary
# ============================================================================
echo ""
echo "=== Layer Packaging Complete ==="
echo ""
echo "📦 Created Layers:"
echo "  - ffmpeg-layer.zip ($FFMPEG_SIZE)"
echo "  - requests-layer.zip ($REQUESTS_SIZE)"
echo ""
echo "☁️  Uploaded to AWS:"
echo "  - FFmpeg Layer: $FFMPEG_LAYER_ARN"
echo "  - Requests Layer: $REQUESTS_LAYER_ARN"
echo ""
echo "📝 Next Steps:"
echo "  1. cd $PROJECT_ROOT/infra/terraform"
echo "  2. terraform plan   # Verify layer ARNs are imported"
echo "  3. terraform apply  # Update Lambda functions with layers"
echo ""
echo "Note: FFmpeg binary will be available at /opt/bin/ffmpeg in Lambda"
echo "      Update extract_media handler to use: /opt/bin/ffmpeg"
